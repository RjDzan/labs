'''
from fastapi import FastAPI
from pydantic import BaseModel
import pyjokes
app = FastAPI()

@app.get("/")
def joke():
    return pyjokes.get_joke()

@app.get("/{friend}")
def friends_joke(friend: str):
    return friend + " tells his joke:" + pyjokes.get_joke()

@app.get("/multi/{friend}")
def multi_friends_joke(friend: str, jokes_number: int):
    result = ""
    for i in range(jokes_number):
        result += friend + f" tells his joke #{i + 1}: " + pyjokes.get_joke() + ""
    return result

class Joke(BaseModel):
    friend: str
    joke: str

class JokeInput(BaseModel):
    friend: str

@app.post("/", response_model=Joke)
def create_joke(joke_input: JokeInput):
    """Создание шутки"""
    return Joke(friend=joke_input.friend, joke=pyjokes.get_joke())
'''
from fastapi import FastAPI
from pydantic import BaseModel
import wikipedia

app = FastAPI()

@app.get("/page/{page_title}", response_model = str)
def get_page(page_title: str):
    content = wikipedia.page(page_title).content
    return content

@app.get("/place", response_model = str)
def get_places(x: float, y: float, count: int):
    result = wikipedia.geosearch(x, y)
    if (count > len(result) - 1):
        return "count is very big"
    return result[count]

class Page(BaseModel):
    title: str
    content: str

class CreatePageResponse(BaseModel):
    page: Page
    created: bool

@app.post("/page", response_model = CreatePageResponse)
def create_page(page: Page):
    return CreatePageResponse(page = page, created = True)
